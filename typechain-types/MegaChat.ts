/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MegaChat {
  export type MessageStruct = {
    messageId: BytesLike;
    sender: AddressLike;
    recipient: AddressLike;
    contentHash: string;
    timestamp: BigNumberish;
    mainWallet: AddressLike;
    exists: boolean;
  };

  export type MessageStructOutput = [
    messageId: string,
    sender: string,
    recipient: string,
    contentHash: string,
    timestamp: bigint,
    mainWallet: string,
    exists: boolean
  ] & {
    messageId: string;
    sender: string;
    recipient: string;
    contentHash: string;
    timestamp: bigint;
    mainWallet: string;
    exists: boolean;
  };

  export type RecentChatStruct = {
    user: AddressLike;
    lastMessage: string;
    timestamp: BigNumberish;
  };

  export type RecentChatStructOutput = [
    user: string,
    lastMessage: string,
    timestamp: bigint
  ] & { user: string; lastMessage: string; timestamp: bigint };
}

export interface MegaChatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeSessionWallet"
      | "doesChatIdExist"
      | "getAllChatIds"
      | "getChatId"
      | "getChatMessages"
      | "getGroupMessages"
      | "getRecentChats"
      | "getUsernameByAddress"
      | "revokeSessionWallet"
      | "sendGroupMessage"
      | "sendMessage"
      | "setUsername"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChatIdCreated"
      | "GroupMessageSent"
      | "MessageSent"
      | "UsernameSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeSessionWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesChatIdExist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllChatIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChatId",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChatMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentChats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsernameByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSessionWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendGroupMessage",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUsername", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "authorizeSessionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesChatIdExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllChatIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChatId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChatMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentChats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsernameByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSessionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendGroupMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsername",
    data: BytesLike
  ): Result;
}

export namespace ChatIdCreatedEvent {
  export type InputTuple = [chatId: BytesLike, isGroup: boolean];
  export type OutputTuple = [chatId: string, isGroup: boolean];
  export interface OutputObject {
    chatId: string;
    isGroup: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GroupMessageSentEvent {
  export type InputTuple = [
    groupId: BytesLike,
    messageId: BytesLike,
    sender: AddressLike,
    contentHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    groupId: string,
    messageId: string,
    sender: string,
    contentHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    groupId: string;
    messageId: string;
    sender: string;
    contentHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    chatId: BytesLike,
    messageId: BytesLike,
    sender: AddressLike,
    recipient: AddressLike,
    contentHash: string,
    timestamp: BigNumberish,
    mainWallet: AddressLike
  ];
  export type OutputTuple = [
    chatId: string,
    messageId: string,
    sender: string,
    recipient: string,
    contentHash: string,
    timestamp: bigint,
    mainWallet: string
  ];
  export interface OutputObject {
    chatId: string;
    messageId: string;
    sender: string;
    recipient: string;
    contentHash: string;
    timestamp: bigint;
    mainWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsernameSetEvent {
  export type InputTuple = [user: AddressLike, username: string];
  export type OutputTuple = [user: string, username: string];
  export interface OutputObject {
    user: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MegaChat extends BaseContract {
  connect(runner?: ContractRunner | null): MegaChat;
  waitForDeployment(): Promise<this>;

  interface: MegaChatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeSessionWallet: TypedContractMethod<
    [sessionWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  doesChatIdExist: TypedContractMethod<[chatId: BytesLike], [boolean], "view">;

  getAllChatIds: TypedContractMethod<[], [string[]], "view">;

  getChatId: TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [string],
    "view"
  >;

  getChatMessages: TypedContractMethod<
    [chatId: BytesLike],
    [MegaChat.MessageStructOutput[]],
    "view"
  >;

  getGroupMessages: TypedContractMethod<
    [groupId: BytesLike],
    [MegaChat.MessageStructOutput[]],
    "view"
  >;

  getRecentChats: TypedContractMethod<
    [],
    [MegaChat.RecentChatStructOutput[]],
    "view"
  >;

  getUsernameByAddress: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  revokeSessionWallet: TypedContractMethod<
    [sessionWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  sendGroupMessage: TypedContractMethod<
    [groupId: BytesLike, contentHash: string],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [recipient: AddressLike, contentHash: string, mainWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setUsername: TypedContractMethod<[username: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeSessionWallet"
  ): TypedContractMethod<[sessionWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doesChatIdExist"
  ): TypedContractMethod<[chatId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllChatIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getChatId"
  ): TypedContractMethod<
    [user1: AddressLike, user2: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChatMessages"
  ): TypedContractMethod<
    [chatId: BytesLike],
    [MegaChat.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGroupMessages"
  ): TypedContractMethod<
    [groupId: BytesLike],
    [MegaChat.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentChats"
  ): TypedContractMethod<[], [MegaChat.RecentChatStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUsernameByAddress"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "revokeSessionWallet"
  ): TypedContractMethod<[sessionWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendGroupMessage"
  ): TypedContractMethod<
    [groupId: BytesLike, contentHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [recipient: AddressLike, contentHash: string, mainWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUsername"
  ): TypedContractMethod<[username: string], [void], "nonpayable">;

  getEvent(
    key: "ChatIdCreated"
  ): TypedContractEvent<
    ChatIdCreatedEvent.InputTuple,
    ChatIdCreatedEvent.OutputTuple,
    ChatIdCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GroupMessageSent"
  ): TypedContractEvent<
    GroupMessageSentEvent.InputTuple,
    GroupMessageSentEvent.OutputTuple,
    GroupMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "UsernameSet"
  ): TypedContractEvent<
    UsernameSetEvent.InputTuple,
    UsernameSetEvent.OutputTuple,
    UsernameSetEvent.OutputObject
  >;

  filters: {
    "ChatIdCreated(bytes32,bool)": TypedContractEvent<
      ChatIdCreatedEvent.InputTuple,
      ChatIdCreatedEvent.OutputTuple,
      ChatIdCreatedEvent.OutputObject
    >;
    ChatIdCreated: TypedContractEvent<
      ChatIdCreatedEvent.InputTuple,
      ChatIdCreatedEvent.OutputTuple,
      ChatIdCreatedEvent.OutputObject
    >;

    "GroupMessageSent(bytes32,bytes32,address,string,uint256)": TypedContractEvent<
      GroupMessageSentEvent.InputTuple,
      GroupMessageSentEvent.OutputTuple,
      GroupMessageSentEvent.OutputObject
    >;
    GroupMessageSent: TypedContractEvent<
      GroupMessageSentEvent.InputTuple,
      GroupMessageSentEvent.OutputTuple,
      GroupMessageSentEvent.OutputObject
    >;

    "MessageSent(bytes32,bytes32,address,address,string,uint256,address)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "UsernameSet(address,string)": TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
    UsernameSet: TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
  };
}
